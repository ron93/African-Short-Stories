{"version":3,"sources":["AxisBottom.js","AxisLeft.js","Marks.js","App.js","useData.js","index.js"],"names":["AxisBottom","xScale","innerHeight","ticks","map","tickValue","className","transform","y2","stroke","dy","style","textAnchor","y","AxisLeft","yScale","domain","x","bandwidth","Marks","data","xValue","yValue","d","width","height","margin","Country","Population","App","useState","setData","useEffect","csv","then","slice","useData","console","log","innerWidth","scaleBand","paddingInner","range","scaleLinear","max","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLACaA,EAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAOC,EAAT,EAASA,YAAT,OACxBD,EAAOE,QAAQC,KAAI,SAACC,GAAD,OACjB,oBAAGC,UAAU,OAAuBC,UAAS,oBAAeN,EAAOI,GAAtB,OAA7C,UACE,sBAAMG,GAAIN,EAAaO,OAAO,UAC9B,sBACEC,GAAG,SACHC,MAAO,CAAEC,WAAY,UACrBC,EAAGX,EAAc,EAHnB,SAKGG,MAPoBA,OCHhBS,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACtBA,EAAOC,SAASZ,KAAI,SAACC,GAAD,OAClB,mBAAGC,UAAU,OAAb,SACA,sBAEEI,GAAG,SACHO,GAAI,EACJJ,EAAGE,EAAOV,GAAaU,EAAOG,YAAc,EAC5CP,MAAO,CAAEC,WAAY,OALvB,SAOGP,GANIA,SCHEc,EAAQ,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMnB,EAAR,EAAQA,OAAQc,EAAhB,EAAgBA,OAAQM,EAAxB,EAAwBA,OAAQC,EAAhC,EAAgCA,OAAhC,OACrBF,EAAKhB,KAAI,SAACmB,GAAD,OACP,sBACAjB,UAAU,OAERW,EAAG,EACHJ,EAAGE,EAAOO,EAAOC,IACjBC,MAAOvB,EAAOoB,EAAOE,IACrBE,OAAQV,EAAOG,aAJVI,EAAOC,QCMVG,EAAgB,GAAhBA,EAA2B,GAA3BA,EAAuC,GAAvCA,EAAiD,IACjDJ,EAAS,SAAAC,GAAC,OAAIA,EAAEI,SAChBN,EAAU,SAAAE,GAAC,OAAIA,EAAEK,YAEVC,EAAM,WACjB,IAAMT,ECTe,WAAO,IAAD,EACHU,mBAAS,MADN,mBACpBV,EADoB,KACdW,EADc,KAY7B,OATAC,qBAAU,WAKRC,YAXA,0JAOY,SAACV,GAEX,OADAA,EAAEK,YAAcL,EAAE,MACXA,KAEQW,MAAK,SAACd,GACrBW,EAAQX,EAAKe,MAAM,EAAG,UAEvB,IACIf,EDHQgB,GAEb,IAAKhB,EACH,OAAO,6CAGTiB,QAAQC,IAAIlB,EAAK,IAEjB,IAAMlB,EAdO,IAcgBwB,EAAaA,EACpCa,EAhBM,IAgBeb,EAAcA,EAEnCX,EAASyB,cACZC,aAAa,IACbzB,OAAOI,EAAKhB,IAAIkB,IAChBoB,MAAM,CAAC,EAAGxC,IAEPD,EAAS0C,cACZ3B,OAAO,CAAC,EAAG4B,YAAIxB,EAAMC,KACrBqB,MAAM,CAAC,EAAGH,IAKb,OADAF,QAAQC,IAAI,QAASrC,EAAOE,SAE1B,qBAAKqB,MA/BK,IA+BSC,OA9BR,IA8BX,SACE,oBAAGlB,UAAS,oBAAemB,EAAf,YAA8BA,EAA9B,MAAZ,UAEE,cAAC,EAAD,CAAYzB,OAAQA,EAAQC,YAAaA,IAGzC,cAAC,EAAD,CAAUa,OAAQA,IAElB,cAAC,EAAD,CAAOK,KAAMA,EACZL,OAAQA,EACPd,OAAQA,EACRoB,OAAUA,EACVC,OAAQA,UE3ClBuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.5dcb6e9c.chunk.js","sourcesContent":["\nexport const AxisBottom = ({xScale,innerHeight}) => \n  xScale.ticks().map((tickValue) => (\n    <g className=\"tick\" key={tickValue} transform={`translate(${xScale(tickValue)},0)`}>\n      <line y2={innerHeight} stroke=\"black\" />\n      <text\n        dy=\"0.71em\"\n        style={{ textAnchor: \"middle\" }}\n        y={innerHeight + 4}\n      >\n        {tickValue}\n      </text>\n    </g>\n  ));\n","export const AxisLeft = ({ yScale }) =>\n  yScale.domain().map((tickValue) => (\n    <g className=\"tick\">\n    <text\n      key={tickValue}\n      dy=\"0.32em\"\n      x={-4}\n      y={yScale(tickValue) + yScale.bandwidth() / 2}\n      style={{ textAnchor: \"end\" }}\n    >\n      {tickValue}\n    </text>\n    </g>\n  ));\n","\nexport const Marks = ({data, xScale, yScale, xValue, yValue}) =>\ndata.map((d) => (\n  <rect \n  className=\"mark\"\n    key={yValue(d)}\n    x={0}\n    y={yScale(yValue(d))}\n    width={xScale(xValue(d))}\n    height={yScale.bandwidth()}\n\n  />\n));\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport { csv, scaleBand, scaleLinear, max, axisBottom, axisLeft } from \"d3\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { useData } from \"./useData\";\nimport { AxisBottom } from \"./AxisBottom\";\nimport { AxisLeft } from \"./AxisLeft\";\nimport { Marks } from \"./Marks\";\n\nconst width = 960;\nconst height = 500;\nconst margin = { top: 20, right: 20, bottom: 20, left: 200 };\nconst yValue = d => d.Country;\nconst xValue =  d => d.Population;\n\nexport const App = () => {\n  const data = useData();\n\n  if (!data) {\n    return <pre>Loading...</pre>;\n  }\n\n  console.log(data[0]);\n\n  const innerHeight = height - margin.top - margin.bottom;\n  const innerWidth = width - margin.left - margin.right;\n\n  const yScale = scaleBand()\n    .paddingInner(0.1)\n    .domain(data.map(yValue))\n    .range([0, innerHeight]);\n\n  const xScale = scaleLinear()\n    .domain([0, max(data, xValue)])\n    .range([0, innerWidth]);\n\n  // KEY used as mapped values unique identifier.\n\n  console.log(\"ticks\", xScale.ticks());\n  return (\n    <svg width={width} height={height}>\n      <g transform={`translate(${margin.left},${margin.top} )`}>\n        {/* x axis ticks */}\n        <AxisBottom xScale={xScale} innerHeight={innerHeight} />\n\n        {/* y- axis ticks */}\n        <AxisLeft yScale={yScale} />\n\n        <Marks data={data}\n         yScale={yScale}\n          xScale={xScale} \n          xValue = {xValue}\n          yValue={yValue}\n          />\n      </g>\n    </svg>\n  );\n};\n// const rootElement = document.getElementById('root');\n// ReactDOM.render(<App />, rootElement);\n","import React, { useState, useEffect } from \"react\";\nimport { csv } from \"d3\";\nimport ReactDOM from \"react-dom\";\nconst csvUrl =\n  \"https://gist.githubusercontent.com/performautodev/ab00b6300b1a235cde9c57600992b86d/raw/9c2f36181b2f090e91dac0b072405b6fe033e60d/UN_Population_2019.csv\";\n\n//useData hook\nexport const useData = () => {\n  const [data, setData] = useState(null);\n\nuseEffect(() => {\n  const row = (d) => {\n    d.Population = +d[\"2020\"];\n    return d;\n  };\n  csv(csvUrl, row).then((data) => {\n    setData(data.slice(0, 10));\n  });\n}, []);\nreturn data\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n// import { Viz } from './Viz';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}